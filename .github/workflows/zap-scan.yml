name: Security Scan (DAST)

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scan on Sundays

jobs:
  security_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      # Step 1: Create Docker network
      - name: Create Docker Network
        run: docker network create zap-network

      # Step 2: Build the Docker image for the profile-service
      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: profile-service:latest

      # Step 3: Run the Docker container for the application in the zap-network
      - name: Run Docker Container
        run: |
          docker run -d --name profile-service \
            --network zap-network \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=zapscan \
            profile-service:latest
          
          # Print container logs for debugging
          sleep 10
          docker logs profile-service

      # Step 4: Wait for the application to start and be available
      - name: Wait for Application to Start
        run: |
          echo "Waiting for the application to start..."
          for i in {1..30}; do
            echo "Attempt $i: Checking if application is up..."
            if curl -v http://localhost:8080/actuator/health; then
              echo "Application is up!"
              exit 0
            fi
            echo "Application not ready yet..."
            docker logs profile-service
            sleep 10
          done
          echo "Application failed to start"
          docker logs profile-service
          exit 1

      # Step 5: Extract OpenAPI Specification from Swagger UI
      - name: Extract OpenAPI Specification
        run: |
          echo "Waiting for Swagger UI to be available..."
          apt-get update && apt-get install -y jq
          for i in {1..30}; do
            echo "Attempt $i: Checking if Swagger UI is accessible..."
            if curl -s http://localhost:8080/v3/api-docs > api-definition.json; then
              echo "Successfully extracted OpenAPI specification"
              cat api-definition.json | jq . > api-definition-formatted.json
              exit 0
            fi
            echo "Swagger not ready yet, waiting..."
            sleep 5
          done
          echo "Failed to extract OpenAPI specification"
          exit 1

      # Step 6: Create ZAP Rules File
      - name: Create ZAP Rules File
        run: |
          cat > zap-rules.tsv << 'EOL'
          10010	IGNORE	(Cookie No HttpOnly Flag)
          10011	IGNORE	(Cookie Without Secure Flag)
          10015	IGNORE	(Incomplete or No Cache-control Header Set)
          # Add more rules as needed for your specific application
          EOL

      # Step 7: Run ZAP API Scan with OpenAPI Specification
      - name: ZAP API Scan
        uses: zaproxy/action-api-scan@v0.5.0
        with:
          target: 'http://profile-service:8080'
          format: openapi
          api_definition: api-definition.json
          token: ${{ secrets.GITHUB_TOKEN }}
          rules_file_name: 'zap-rules.tsv'
          cmd_options: >
            -t http://profile-service:8080
            -r zap_report.html
            -z "-config scanner.attackStrength=HIGH 
                -config scanner.alertThreshold=MEDIUM
                -config api.disablekey=true
                -config rules.cookie.ignorelist=true
                -config scanner.level=ATTACK
                -config rules.ascanrules.refs.json=true
                -config rules.ascanrules.script.injection=true
                -config rules.ascanrules.server.side.injection=true
                -config rules.ascanrules.sql.injection=true
                -config rules.ascanrules.nosqli.injection=true
                -config rules.ascanrules.xxe.injection=true
                -config rules.ascanrules.path.traversal=true
                -config rules.ascanrules.remote.code.execution=true"

      # Step 8: Generate enhanced reports
      - name: Generate Enhanced Reports
        if: always()
        run: |
          mkdir -p reports
          mv zap_report.html reports/
          echo "## DAST Scan Summary" > reports/summary.md
          grep -A5 "Risk Level.*Number of Alerts" reports/zap_report.html | sed 's/<[^>]*>//g' >> reports/summary.md

      # Step 9: Upload the ZAP report as an artifact
      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-reports
          path: reports/

      # Step 10: Fail on critical findings
      - name: Check for High Severity Findings
        run: |
          # Look for High severity findings in ZAP report
          HIGH_COUNT=$(cat reports/zap_report.html | grep -A1 "Risk Level.*Number of Alerts" | grep "High" -A1 | tail -n1 | tr -d ' \t\r\n')
          echo "High severity count: $HIGH_COUNT"
          if [ "$HIGH_COUNT" -gt "0" ]; then
            echo "Critical or High severity vulnerabilities found!"
            exit 1
          else
            echo "No Critical or High severity vulnerabilities found."
            exit 0
          fi