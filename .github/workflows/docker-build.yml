name: Build, Test, SAST, and Push Docker Image

on:
  push:
    branches:
      - feature/shopsmart-72
  pull_request:
    branches:
      - feature/shopsmart-72
  workflow_dispatch: # allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}  # Ensure that the region is being set
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REPO_URI: ${{ secrets.ECR_REPO_URI }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      # Run SAST and Linting with SonarCloud
      - name: Install SonarCloud Scanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner.zip -d $HOME
          export PATH=$HOME/sonar-scanner-4.6.2.2472-linux/bin:$PATH

      - name: SonarCloud Scan with Linting
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=ShopSmartSG_profile-service \
            -Dsonar.organization= \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.exclusions=**/test/**,**/tests/** \
            -Dsonar.java.source=21 \
            -Dsonar.java.target=21 \
            -Dsonar.java.lint=true  # Enabling linting for Java 21 sources

      # Check SonarCloud scan result and fail if quality gate fails
      - name: Check SonarCloud Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          STATUS=$(curl -s "https://sonarcloud.io/api/qualitygates/project_status?projectKey=ShopSmartSG_profile-service" \
            -H "Authorization: Bearer $SONAR_TOKEN" | jq -r '.projectStatus.status')
          if [ "$STATUS" != "OK" ]; then
            echo "SonarCloud Quality Gate failed: $STATUS"
            exit 1
          else
            echo "SonarCloud Quality Gate passed: $STATUS"
          fi

      # Upload SAST and Lint Reports
      - name: Upload SAST and Lint Reports
        uses: actions/upload-artifact@v3
        with:
          name: sonarcloud-reports
          path: ./target/sonar-reports/  # Adjust the path to where the reports are stored

      # Build and run tests with JaCoCo
      - name: Build and run tests with JaCoCo
        run: |
          mvn clean test
          mvn jacoco:report

      - name: Check JaCoCo Coverage Threshold
        run: |
          COVERAGE=$(grep -oPm1 "(?<=<counter type=\"LINE\" missed=\")\d+" target/site/jacoco/jacoco.xml)
          if [ "$COVERAGE" -lt "80" ]; then
            echo "Code coverage is below 80%, build failed."
            exit 1
          fi
        shell: bash
      - name: Debug AWS Credentials
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}"
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "ECR_REPO_URI=${{ secrets.ECR_REPO_URI }}"

      - name: Log in to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/l0d0i0v3

      - name: Build Docker image
        run: |
          docker build -t shopsmartsg/profile-service .
          docker tag shopsmartsg/profile-service:latest ${{ secrets.ECR_REPO_URI }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPO_URI }}:latest
